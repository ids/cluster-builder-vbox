kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: {{ targetd_server_storage_class }}
provisioner: {{ targetd_server_provisioner_name }}
parameters:
# this id where the iscsi server is running
  targetPortal: {{ targetd_server }}:3260
  
# this is the iscsi server iqn  
  iqn: {{ targetd_server_iqn }}
  
# this is the iscsi interface to be used, the default is default
# iscsiInterface: default

  fsType: ext4
# this must be on eof the volume groups condifgured in targed.yaml, the default is vg-targetd
  volumeGroup: {{ targetd_server_volume_group }}

# this is a comma separated list of initiators that will be give access to the created volumes, they must correspond to what you have configured in your nodes.
  initiators: {% for host in groups['vmware_vms'] %}{{ hostvars[host].initiator_name }}{% if not loop.last %},{% endif %}{% endfor %}
  
# whether or not to use chap authentication for discovery operations  
#  chapAuthDiscovery: "true"
 
# whether or not to use chap authentication for session operations  
#  chapAuthSession: "true" 
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: iscsi-provisioner-runner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "update", "create", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-iscsi-provisioner
subjects:
  - kind: ServiceAccount
    name: iscsi-provisioner
    namespace: {{ targetd_server_namespace }}
roleRef:
  kind: ClusterRole
  name: iscsi-provisioner-runner
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: iscsi-provisioner
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: iscsi-provisioner
  namespace: {{ targetd_server_namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: iscsi-provisioner
  template:
    metadata:
      labels:
        app: iscsi-provisioner
    spec:
      containers:
        - name: iscsi-provisioner
          imagePullPolicy: Always
          image: quay.io/external_storage/iscsi-controller:latest
          args:
            - "start"
          env:
            - name: PROVISIONER_NAME
              value: {{ targetd_server_provisioner_name }}
            - name: LOG_LEVEL
              value: debug
            - name: TARGETD_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ targetd_server_account_credentials }}
                  key: username
            - name: TARGETD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ targetd_server_account_credentials }}
                  key: password
            - name: TARGETD_ADDRESS
              value: {{ targetd_server }}
      serviceAccount: iscsi-provisioner